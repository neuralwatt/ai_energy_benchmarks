# AI Energy Benchmarks - POC Phase
# Python package configuration

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ai_energy_benchmarks"
version = "0.0.4"
description = "Modular benchmarking framework for AI energy measurements - POC Phase"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "NeuralWatt", email = "info@neuralwatt.com"}
]
keywords = ["ai", "energy", "benchmarks", "carbon", "emissions", "gpu"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "requests>=2.31.0",
    "datasets>=2.14.0",
    "codecarbon>=2.3.0",
    "omegaconf>=2.3.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "pre-commit>=3.3.0",
]

pytorch = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate",
]

all = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "pre-commit>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/neuralwatt/ai_energy_benchmarks"
Documentation = "https://github.com/neuralwatt/ai_energy_benchmarks/tree/main/docs"
Repository = "https://github.com/neuralwatt/ai_energy_benchmarks"
Issues = "https://github.com/neuralwatt/ai_energy_benchmarks/issues"

# [project.scripts]
# ai-energy-benchmark = "ai_energy_benchmarks.cli:main"
# Note: CLI not implemented in POC phase - use programmatic API

[tool.setuptools]
packages = ["ai_energy_benchmarks", "ai_energy_benchmarks.backends", "ai_energy_benchmarks.config",
            "ai_energy_benchmarks.datasets", "ai_energy_benchmarks.formatters",
            "ai_energy_benchmarks.metrics", "ai_energy_benchmarks.reporters",
            "ai_energy_benchmarks.utils"]

[tool.setuptools.package-data]
ai_energy_benchmarks = ["py.typed", "config/*.yaml"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=ai_energy_benchmarks",
    "--cov-report=html",
    "--cov-report=term",
]
markers = [
    "readme_examples: Tests that validate examples from README.md",
    "integration: Integration tests requiring external services",
    "e2e: End-to-end tests requiring full system setup",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.format]
# Use Black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true

# Ignore missing imports for optional dependencies
[[tool.mypy.overrides]]
module = [
    "torch",
    "torch.*",
    "transformers",
    "transformers.*",
    "accelerate",
    "accelerate.*",
]
ignore_missing_imports = true
